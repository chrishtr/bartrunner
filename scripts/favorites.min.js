/*
 *
 *  Bart Runner Web
 *  Copyright 2018 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the 'License');
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
(function() {
'use strict';

const Installer = function(root) {
  let promptEvent;

  const install = function(e) {
    if(promptEvent) {
      promptEvent.prompt();
      promptEvent.userChoice
        .then(function(choiceResult) {
          // The user actioned the prompt (good or bad).
          // good is handled in
          promptEvent = null;
          root.classList.remove('available');
        })
        .catch(function(installError) {
          // Boo. update the UI.
          promptEvent = null;
          root.classList.remove('available');
        });
    }
  };

  const installed = function(e) {
    promptEvent = null;
    // This fires after onbeforinstallprompt OR after manual add to homescreen.
    root.classList.remove('available');
  };

  const beforeinstallprompt = function(e) {
    promptEvent = e;
    promptEvent.preventDefault();
    root.classList.add('available');
    return false;
  };

  window.addEventListener('beforeinstallprompt', beforeinstallprompt);
  window.addEventListener('appinstalled', installed);

  root.addEventListener('click', install.bind(this));
  root.addEventListener('touchend', install.bind(this));
};

class BartRunnerFavorites {
  constructor(root) {
    this.fromStation_ = root.querySelector('#from-station');
    this.toStation_ = root.querySelector('#to-station');
    this.statusGroup_ = root.querySelector('#status');
    this.resultsTable_ = root.querySelector('#results');
    if (!this.fromStation_ || !this.toStation_ || !this.statusGroup_ || !this.resultsTable_)
      throw "Unable to locate UI elements";

    // Update both sets of station selectors, then update trains
    this.addStationsTo(this.fromStation_);
    this.addStationsTo(this.toStation_);

    // Whenever station changes, update trains
    this.fromStation_.addEventListener("change",this.updateTrains.bind(this));
    this.toStation_.addEventListener("change", this.updateTrains.bind(this));

    // And periodicially update anyway
    setInterval(this.updateTrains.bind(this),5000);
  }

  get fromStation() {
    return this.fromStation_;
  }
  get toStation() {
    return this.toStation_;
  }
  get statusGroup() {
    return this.statusGroup_;
  }
  get resultsTable() {
    return this.resultsTable_;
  }

  addToLog(newMsg) {
    let newDiv = document.createElement('div');
    newDiv.innerHTML = newMsg;
    this.statusGroup.appendChild(newDiv);
  }

  addStationsTo(selector) {
    if (!selector)
      return;

    var that = this;
    BartRunnerUtils.requestBartApi('stn','stns')
      .then(function(data) {
        let stationList = data.root.stations.station;
        selector.innerHTML = '';
        stationList.forEach(stn => {
          let newItem = document.createElement('option');
          newItem.value = stn.abbr;
          newItem.innerHTML = stn.name;
          selector.appendChild(newItem);
        });
        that.updateTrains();
      })
      .catch(function(err) {
        if (err.statusText)
          err=err.statusText;
        that.addToLog('error accessing stations: ' + err);
      });
  }

  displayTrainStatus(trainStatus) {
    // [{"destination": "full station name", "etdMinutes": 23.4, "etaMinutes": 45.11},...]
    this.resultsTable.innerHTML = '';
   // sort by departure time
    trainStatus.sort(function (a, b) {
      return a.etdMinutes - b.etdMinutes;
    });
    trainStatus.forEach(etd => {
      let thisDest = etd.destination;
      let thisEtdVal = etd.etdMinutes;
      let thisEtaVal = etd.etaMinutes;

      let title = document.createElement('div');
      title.innerHTML = thisDest;
      title.classList.add('station-label');
      this.resultsTable.appendChild(title);

      let leavingBox = document.createElement('div');
      leavingBox.classList.add('leavingbox','estimate-group');
      let leavingBoxLabel = document.createElement('label');
      leavingBoxLabel.innerHTML = 'Leave in';
      leavingBoxLabel.classList.add('estimate-label');
      leavingBox.appendChild(leavingBoxLabel);
      let leavingBoxSpan = document.createElement('span');
      leavingBoxSpan.innerHTML = BartRunnerUtils.getEtaDispStr(thisEtdVal);
      leavingBoxSpan.classList.add('estimate-value');
      leavingBox.appendChild(leavingBoxSpan);
      this.resultsTable.appendChild(leavingBox);

      let arrivingBox = document.createElement('div');
      arrivingBox.classList.add('arrivingbox','estimate-group');
      let arrivingBoxLabel = document.createElement('label');
      arrivingBoxLabel.innerHTML = 'Arrive in';
      arrivingBoxLabel.classList.add('estimate-label');
      arrivingBox.appendChild(arrivingBoxLabel);
      let arrivingBoxSpan = document.createElement('span');
      arrivingBoxSpan.innerHTML = BartRunnerUtils.getEtaDispStr(thisEtaVal);
      arrivingBoxSpan.classList.add('estimate-value');
      arrivingBox.appendChild(arrivingBoxSpan);
      this.resultsTable.appendChild(arrivingBox);
    });
  }

  updateTrains() {
    var that = this;
    this.requestBartApi('etd','etd',{'orig': this.fromStation.value})
      .then(function(data) {
        let stationData = data.root.station;
        if (stationData.length) {
          if (stationData.length > 1) {
            alert("Station length is " + stationData.length + ". This shouldn't happen!");
          }
          stationData = stationData[0]; // Sometimes an array, sometimes not
        }
        let etdList = stationData.etd;
        if (!etdList)
          return;

        let trainStatus = [];
        etdList.forEach(etdDest => {
          let thisDest = etdDest.destination;
          etdDest.estimate.forEach(actualEtd => {
            let thisEtdVal = parseInt(actualEtd.minutes);
            if (isNaN(thisEtdVal)) {
              thisEtdVal = 0;
            }
            trainStatus.push({
              "destination": thisDest,
              "etdMinutes" : (thisEtdVal + 0.11),
              "etaMinutes" : (thisEtdVal + 12.65)
            });
          });
          that.displayTrainStatus(trainStatus);
        });
      })
      .catch(function(err) {
        if (err.statusText)
          err=err.statusText;
        that.addToLog('error accessing ETD information: ' + err);
      });
  }
};

window.addEventListener('load', function() {
  const installerObj = new Installer(document.getElementById('installer'));
  const obj = new BartRunnerFavorites(document.getElementById('bartrunner-favorites-container'));
});
})();
