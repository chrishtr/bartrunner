/*
 *
 *  Bart Runner Web
 *  Copyright 2018 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the 'License');
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
(function() {
'use strict';

const Installer = function(root) {
  let promptEvent;

  const install = function(e) {
    if(promptEvent) {
      promptEvent.prompt();
      promptEvent.userChoice
        .then(function(choiceResult) {
          // The user actioned the prompt (good or bad).
          // good is handled in
          promptEvent = null;
          root.classList.remove('available');
        })
        .catch(function(installError) {
          // Boo. update the UI.
          promptEvent = null;
          root.classList.remove('available');
        });
    }
  };

  const installed = function(e) {
    promptEvent = null;
    // This fires after onbeforinstallprompt OR after manual add to homescreen.
    root.classList.remove('available');
  };

  const beforeinstallprompt = function(e) {
    promptEvent = e;
    promptEvent.preventDefault();
    root.classList.add('available');
    return false;
  };

  window.addEventListener('beforeinstallprompt', beforeinstallprompt);
  window.addEventListener('appinstalled', installed);

  root.addEventListener('click', install.bind(this));
  root.addEventListener('touchend', install.bind(this));
};

class BartRunnerFavorites {
  constructor(root) {
    this.root_ = root;
    this.resultsGrid_ = root.querySelector("#favorites-results");
    if (!this.root_ || !this.resultsGrid_)
      throw "Unable to locate UI elements";

    // Update the results grid
    this.updateData();

    // // Whenever station changes, update trains
    // this.fromStation_.addEventListener("change",this.updateTrains.bind(this));
    // this.toStation_.addEventListener("change", this.updateTrains.bind(this));

    // And periodicially update anyway
    setInterval(this.updateData.bind(this),5000);
  }

  get root() {
    return this.root_;
  }
  get resultsGrid() {
    return this.resultsGrid_;
  }

  addToLog(newMsg) {
    BartRunnerUtils.addToLog(this,newMsg)
  }

  displayTrainStatus(trainStatus) {
    // [{"destination": "full station name", "etdMinutes": 23.4, "etaMinutes": 45.11},...]
    this.resultsGrid.innerHTML = '';
   // sort by departure time
    trainStatus.sort(function (a, b) {
      return a.etdMinutes - b.etdMinutes;
    });
    trainStatus.forEach(etd => {

    /*
        <object class="favorites-grid-icon" type="image/svg+xml" data="images/favorites_grid.svg"></object>
        <div class='route-label'>No favorite routes have been added yet</div>
        <div class='favorites-estimate-group'>
          <span class='time-estimate'>8m, 42s</span>
          <span class='other-estimates'>Dep 9:44</span>
        </div>
         ---- more here ---
    */

      let favoritesIcon = document.createElement('object');
      favoritesIcon.classList.add('favorites-grid-icon');
      favoritesIcon.type = "image/svg+xml";
      favoritesIcon.data = "images/favorites_grid.svg";
      this.resultsGrid.appendChild(favoritesIcon);

      let routeName = document.createElement('div');
      routeName.innerHTML = etd.routeLabel;
      routeName.classList.add('route-label');
      this.resultsGrid.appendChild(routeName);

      let leavingBox = document.createElement('div');
      leavingBox.classList.add('favorites-estimate-group');
      let timeEstimateSpan = document.createElement('span');
      timeEstimateSpan.innerHTML = BartRunnerUtils.getEtaDispStr(etd.etdMinutes);
      timeEstimateSpan.classList.add('time-estimate');
      leavingBox.appendChild(timeEstimateSpan);
      let otherEstimateSpan = document.createElement('span');
      otherEstimateSpan.innerHTML = "Dep " + BartRunnerUtils.getTimeDispStr(etd.etdMinutes);
      otherEstimateSpan.classList.add('other-estimate');
      leavingBox.appendChild(otherEstimateSpan);
      this.resultsGrid.appendChild(leavingBox);
    });
  }

  updateData() {
    // Here, get the saved favorites, eventually
    let favorites_data = [
      {"from": "PHIL", "to": "EMBR"},
      {"from": "DBRK", "to": "PHIL"},
      {"from": "ANTC", "to": "SFIA"},
    ]

    var that = this;
    let trainStatus = [];
    let promises = favorites_data.map(function(route,indx) {
      //alert('Running indx ' + indx + ': ' + route.from + ' to ' + route.to);
      return BartRunnerUtils.requestBartApi('etd','etd',{'orig': route.from})
        .then(function(data) {
          let stationData = data.root.station;
          if (stationData.length) {
            if (stationData.length > 1) {
              alert("Station length is " + stationData.length + ". This shouldn't happen!");
            }
            stationData = stationData[0]; // Sometimes an array, sometimes not
          }
          let etdList = stationData.etd;
          if (!etdList || (etdList.length == 0))
            return;
          let etdDest = etdList[0]
          let thisDest = etdDest.destination;
          if (etdDest.estimate.length == 0)
            return;
          let thisEtdVal = parseInt(etdDest.estimate[0].minutes);
          if (isNaN(thisEtdVal)) {
            thisEtdVal = 0;
          }
          trainStatus[indx] = {
            "routeLabel": route.from + "-" + route.to,
            "destination": thisDest,
            "etdMinutes" : (thisEtdVal + 0.11),
            "etaMinutes" : (thisEtdVal + 12.65)
          };
        })
        .catch(function(err) {
          if (err.statusText)
            err=err.statusText;
          that.addToLog('error accessing ETD information: ' + err);
        });
    });
    Promise.all(promises)
    .then(function(results) {
      //alert(results);
      //alert("Got here with " + trainStatus.length + " trains");
      that.displayTrainStatus(trainStatus);
    });
  }
};

window.addEventListener('load', function() {
  const installerObj = new Installer(document.getElementById('installer'));
  const obj = new BartRunnerFavorites(document.getElementById('main-app-favorites'));
});
})();
