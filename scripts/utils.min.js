/*
 *
 *  Bart Runner Web
 *  Copyright 2018 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the 'License');
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
'use strict';

class BartRunnerUtils {

  static pad(num, size) {
    var s = num+"";
    while (s.length < size) s = "0" + s;
    return s;
  }

  static formatTimeMinutes(minutes) {
    let isNegative = minutes<0;
    if (isNegative)
    {
      minutes = -minutes; // Handle negatives like positives
    }
    var wholeMinutes = Math.floor(minutes);
    let closestMinutes = Math.round(minutes);
    var wholeSeconds = Math.round((minutes - wholeMinutes)*60);
    if (wholeSeconds == 60)
    {
      wholeSeconds = 0;
      wholeMinutes += 1;
    }
    let signStr = isNegative ? "-" : "";
    if (wholeMinutes==0)
    {
      return signStr + wholeSeconds + "s";
    } else {
//            switch timeFormat
//            {
//            case .msWithColon:
//                return "\(signStr)\(Int(wholeMinutes)):\(String(format: "%02d",wholeSeconds))"
//            case .msOnly:
//                return "\(signStr)\(Int(wholeMinutes))m\(String(format: "%02d",wholeSeconds))s"
//            case .msWithSpace:
            return signStr + wholeMinutes + "m " + BartRunnerUtils.pad(wholeSeconds,2) + "s"
//            case .mOnly:
//                return "\(signStr)\(Int(closestMinutes))m"
//            }
    }
  }

  static getEtaDispStr(etaMinutes) {
    let etdMinutes = etaMinutes;
    let negativeStr = "Lvng!";
    let atStationStr = "Here!";
    let arrivingStr = "Arvng!";
    let arrivalTimeSeconds = 10.0;
    if (etdMinutes<0)
    {
        return negativeStr;
    } else if (etaMinutes < 0)
    {
        return atStationStr;
    } else if (etaMinutes <= (arrivalTimeSeconds/60.0)) {
        return arrivingStr;
    } else {
        return BartRunnerUtils.formatTimeMinutes(etaMinutes);
    }
  }

  static addToLog(obj,newMsg) {
    let newDiv = document.createElement('div');
    newDiv.innerHTML = newMsg;
    obj.statusGroup.appendChild(newDiv);
  }

  static apiKey() {
    return "5LD9-IAYI-TRAT-MHHW";
  }

  static requestBartApi(group,command,extraparams) {
    return new Promise(function (resolve, reject) {
      var xhr = new XMLHttpRequest();
      let url = 'https://api.bart.gov/api/' + group + '.aspx?cmd=' + command + '&key=' + BartRunnerUtils.apiKey() + '&json=y';
      for (var key in extraparams) {
        url = url + '&' + key + '=' + extraparams[key];
      }
      xhr.open('GET', url, true);
      xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
          var data;
          try {
            data = JSON.parse(xhr.response);
          } catch(err) {
            reject({
              status: -1,
              statusText: 'error parsing station JSON: ' + xhr.response
            });
            return;
          }
          resolve(data);
        } else {
          reject({
            status: xhr.status,
            statusText: 'Received status code ' + xhr.status + ': ' + xhr.statusText
          });
        }
      };
      xhr.onerror = function () {
        reject({
          status: xhr.status,
          statusText: 'Received error (code ' + xhr.status + '): ' + xhr.statusText
        });
      };
      xhr.send();
    });
  }
};
