/*
 *
 *  Bart Runner Web
 *  Copyright 2018 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the 'License');
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
'use strict';

class BartRunnerUtils {

  static saveFavorites(favoritesData) {
    if (typeof(Storage) === "undefined")
      return; // Sorry! No Web Storage support.
    let favoritesJson = JSON.stringify(favoritesData);
    localStorage.setItem("bartrunner-favorites", favoritesJson);
  }

  static loadFavorites() {
    if (typeof(Storage) === "undefined")
      return; // Sorry! No Web Storage support.
    let favoritesJson = localStorage.getItem("bartrunner-favorites");
    return JSON.parse(favoritesJson);
  }

  static pad(num, size) {
    var s = num+"";
    while (s.length < size) s = "0" + s;
    return s;
  }

  static formatTimeMinutes(minutes) {
    let isNegative = minutes<0;
    if (isNegative)
    {
      minutes = -minutes; // Handle negatives like positives
    }
    var wholeMinutes = Math.floor(minutes);
    let closestMinutes = Math.round(minutes);
    var wholeSeconds = Math.round((minutes - wholeMinutes)*60);
    if (wholeSeconds == 60)
    {
      wholeSeconds = 0;
      wholeMinutes += 1;
    }
    let signStr = isNegative ? "-" : "";
    if (wholeMinutes==0)
    {
      return signStr + wholeSeconds + "s";
    } else {
//            switch timeFormat
//            {
//            case .msWithColon:
//                return "\(signStr)\(Int(wholeMinutes)):\(String(format: "%02d",wholeSeconds))"
//            case .msOnly:
//                return "\(signStr)\(Int(wholeMinutes))m\(String(format: "%02d",wholeSeconds))s"
//            case .msWithSpace:
            return signStr + wholeMinutes + "m " + BartRunnerUtils.pad(wholeSeconds,2) + "s"
//            case .mOnly:
//                return "\(signStr)\(Int(closestMinutes))m"
//            }
    }
  }

  static getEtaDispStr(etaMinutes) {
    let etdMinutes = etaMinutes;
    let negativeStr = "Lvng!";
    let atStationStr = "Here!";
    let arrivingStr = "Arvng!";
    let arrivalTimeSeconds = 10.0;
    if (etdMinutes<0)
    {
        return negativeStr;
    } else if (etaMinutes < 0)
    {
        return atStationStr;
    } else if (etaMinutes <= (arrivalTimeSeconds/60.0)) {
        return arrivingStr;
    } else {
        return BartRunnerUtils.formatTimeMinutes(etaMinutes);
    }
  }

  // From here: https://stackoverflow.com/questions/8847109/formatting-the-date-time-with-javascript
  static strftime(sFormat, date) {
    if (!(date instanceof Date)) date = new Date();
    var nDay = date.getDay(),
      nDate = date.getDate(),
      nMonth = date.getMonth(),
      nYear = date.getFullYear(),
      nHour = date.getHours(),
      aDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
      aMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
      aDayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],
      isLeapYear = function() {
        return (nYear%4===0 && nYear%100!==0) || nYear%400===0;
      },
      getThursday = function() {
        var target = new Date(date);
        target.setDate(nDate - ((nDay+6)%7) + 3);
        return target;
      },
      zeroPad = function(nNum, nPad) {
        return ('' + (Math.pow(10, nPad) + nNum)).slice(1);
      };
    return sFormat.replace(/%[a-z]/gi, function(sMatch) {
      return {
        '%a': aDays[nDay].slice(0,3),
        '%A': aDays[nDay],
        '%b': aMonths[nMonth].slice(0,3),
        '%B': aMonths[nMonth],
        '%c': date.toUTCString(),
        '%C': Math.floor(nYear/100),
        '%d': zeroPad(nDate, 2),
        '%e': nDate,
        '%F': date.toISOString().slice(0,10),
        '%G': getThursday().getFullYear(),
        '%g': ('' + getThursday().getFullYear()).slice(2),
        '%H': zeroPad(nHour, 2),
        '%I': (nHour+11)%12 + 1,   /* Modified here to not pad */
        //'%I': zeroPad((nHour+11)%12 + 1, 2),
        '%j': zeroPad(aDayCount[nMonth] + nDate + ((nMonth>1 && isLeapYear()) ? 1 : 0), 3),
        '%k': '' + nHour,
        '%l': (nHour+11)%12 + 1,
        '%m': zeroPad(nMonth + 1, 2),
        '%M': zeroPad(date.getMinutes(), 2),
        '%p': (nHour<12) ? 'AM' : 'PM',
        '%P': (nHour<12) ? 'am' : 'pm',
        '%s': Math.round(date.getTime()/1000),
        '%S': zeroPad(date.getSeconds(), 2),
        '%u': nDay || 7,
        '%V': (function() {
                var target = getThursday(),
                  n1stThu = target.valueOf();
                target.setMonth(0, 1);
                var nJan1 = target.getDay();
                if (nJan1!==4) target.setMonth(0, 1 + ((4-nJan1)+7)%7);
                return zeroPad(1 + Math.ceil((n1stThu-target)/604800000), 2);
              })(),
        '%w': '' + nDay,
        '%x': date.toLocaleDateString(),
        '%X': date.toLocaleTimeString(),
        '%y': ('' + nYear).slice(2),
        '%Y': nYear,
        '%z': date.toTimeString().replace(/.+GMT([+-]\d+).+/, '$1'),
        '%Z': date.toTimeString().replace(/.+\((.+?)\)$/, '$1')
      }[sMatch] || sMatch;
    });
  }

  static getTimeDispStr(etaMinutes) {
    let now = new Date();
    let displayedTime = new Date(now.getTime() + etaMinutes*60*1000); // Add this many milliseconds
    return BartRunnerUtils.strftime("%I:%M %p", displayedTime);
//    return displayedTime.getTime().toLocaleString();
  }

  static addToLog(obj,newMsg) {
    let newDiv = document.createElement('div');
    newDiv.innerHTML = newMsg;
    obj.root.querySelector('#status').appendChild(newDiv);
  }

  static apiKey() {
    return "5LD9-IAYI-TRAT-MHHW";
  }

  static requestBartApi(group,command,extraparams) {
    return new Promise(function (resolve, reject) {
      var xhr = new XMLHttpRequest();
      let url = 'https://api.bart.gov/api/' + group + '.aspx?cmd=' + command + '&key=' + BartRunnerUtils.apiKey() + '&json=y';
      for (var key in extraparams) {
        url = url + '&' + key + '=' + extraparams[key];
      }
      xhr.open('GET', url, true);
      xhr.onload = function () {
        if (xhr.status >= 200 && xhr.status < 300) {
          var data;
          try {
            data = JSON.parse(xhr.response);
          } catch(err) {
            reject({
              status: -1,
              statusText: 'error parsing station JSON: ' + xhr.response
            });
            return;
          }
          resolve(data);
        } else {
          reject({
            status: xhr.status,
            statusText: 'Received status code ' + xhr.status + ': ' + xhr.statusText
          });
        }
      };
      xhr.onerror = function () {
        reject({
          status: xhr.status,
          statusText: 'Received error (code ' + xhr.status + '): ' + xhr.statusText
        });
      };
      xhr.send();
    });
  }
};
