/*
 *
 *  Bart Runner Web
 *  Copyright 2018 Google Inc. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the 'License');
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an 'AS IS' BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License
 *
 */
(function() {
'use strict';

const Installer = function(root) {
  let promptEvent;

  const install = function(e) {
    if(promptEvent) {
      promptEvent.prompt();
      promptEvent.userChoice
        .then(function(choiceResult) {
          // The user actioned the prompt (good or bad).
          // good is handled in 
          promptEvent = null;
          root.classList.remove('available');
        })
        .catch(function(installError) {
          // Boo. update the UI.
          promptEvent = null;
          root.classList.remove('available');
        });
    }
  };

  const installed = function(e) {
    promptEvent = null;
    // This fires after onbeforinstallprompt OR after manual add to homescreen.
    root.classList.remove('available');
  };

  const beforeinstallprompt = function(e) {
    promptEvent = e;
    promptEvent.preventDefault();
    root.classList.add('available');
    return false;
  };

  window.addEventListener('beforeinstallprompt', beforeinstallprompt);
  window.addEventListener('appinstalled', installed);

  root.addEventListener('click', install.bind(this));
  root.addEventListener('touchend', install.bind(this));
};

const BartRunner = function(root) {
  const fromStation = root.querySelector('#from-station');
  const toStation = root.querySelector('#to-station');
  const statusGroup = root.querySelector('#status');

  if (!fromStation || !fromStation || !statusGroup)
    return; 

  function addToLog(newMsg) {
    let newDiv = document.createElement('div');
    newDiv.innerHTML = newMsg;
    statusGroup.appendChild(newDiv);
  }

  function addStationsTo(selector) {
    if (!selector)
      return;
    var request = new XMLHttpRequest();
    request.open('GET', 'http://api.bart.gov/api/stn.aspx?cmd=stns&key=MW9S-E7SL-26DU-VV8V&json=y', true);
    request.onload = function () {
      var data = JSON.parse(this.response);
      if (request.status >= 200 && request.status < 400) {
        let stationList = data.root.stations.station;
        selector.innerHTML = '';
        stationList.forEach(stn => {
          let newItem = document.createElement('option');
          newItem.value = stn.abbr;
          newItem.innerHTML = stn.name;
          selector.appendChild(newItem);
        });
      } else {
        addToLog('error accessing stations');
      }
    }
    request.send();
  }
  addStationsTo(fromStation);
  addStationsTo(toStation);

  function updateTrains() {
    const resultsTable = root.querySelector('#results');
    if (!resultsTable)
      return;
    var request = new XMLHttpRequest();
    request.open('GET', 'http://api.bart.gov/api/etd.aspx?cmd=etd&orig=' + fromStation.value + '&key=MW9S-E7SL-26DU-VV8V&json=y', true);
    request.onload = function () {
      var data = JSON.parse(this.response);
      if (request.status >= 200 && request.status < 400) {
        resultsTable.innerHTML = '';
        let stationData = data.root.station;
        if (stationData.length) {
          if (stationData.length > 1) {
            alert("Station length is " + stationData.length + ". This shouldn't happen!");
          }
          stationData = stationData[0]; // Sometimes an array, sometimes not
        }
        let etdList = stationData.etd;
        if (!etdList)
          return;

        etdList.forEach(etdDest => {
          let thisDest = etdDest.destination;
          etdDest.estimate.forEach(actualEtd => {
            let thisEtdVal = parseInt(actualEtd.minutes);

            let title = document.createElement('div');
            title.innerHTML = thisDest;
            title.classList.add('station-label');
            resultsTable.appendChild(title);

            let leavingBox = document.createElement('div');
            leavingBox.classList.add('leavingbox','estimate-group');
            let leavingBoxLabel = document.createElement('label');
            leavingBoxLabel.innerHTML = 'Leave in';
            leavingBoxLabel.classList.add('estimate-label');
            leavingBox.appendChild(leavingBoxLabel);
            let leavingBoxSpan = document.createElement('span');
            leavingBoxSpan.innerHTML = thisEtdVal + "m";
            leavingBoxSpan.classList.add('estimate-value');
            leavingBox.appendChild(leavingBoxSpan);
            resultsTable.appendChild(leavingBox);

            let arrivingBox = document.createElement('div');
            arrivingBox.classList.add('arrivingbox','estimate-group');
            let arrivingBoxLabel = document.createElement('label');
            arrivingBoxLabel.innerHTML = 'Arrive in';
            arrivingBoxLabel.classList.add('estimate-label');
            arrivingBox.appendChild(arrivingBoxLabel);
            let arrivingBoxSpan = document.createElement('span');
            arrivingBoxSpan.innerHTML = (thisEtdVal + 12) + "m";
            arrivingBoxSpan.classList.add('estimate-value');
            arrivingBox.appendChild(arrivingBoxSpan);
            resultsTable.appendChild(arrivingBox);
          });
        });
      } else {
        addToLog('error accessing ETD information');
      }
    }
    request.send();
  }
  updateTrains();

  fromStation.addEventListener("change", function() {
    updateTrains();

    //addToLog("New FROM Station: " + fromStation.value);
  });

  toStation.addEventListener("change", function() {
    updateTrains();

    //addToLog("New TO Station: " + toStation.value);
  });
}

window.addEventListener('load', function() {
  const bartRunnerEl = document.getElementById('bartrunner-container');
  const installEl = document.getElementById('installer');
  const bartRunner = new BartRunner(bartRunnerEl);
  const installer = new Installer(installEl);
});
})();
